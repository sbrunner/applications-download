name: Continuous integration

on:
  push:
    branches:
      - master
      - '[0-9]+.[0-9]+'
    tags:
      - '*'
  pull_request:

permissions:
  id-token: write

  contents: write

jobs:
  pre-commit:
    name: Pre commit checks
    runs-on: ubuntu-24.04
    timeout-minutes: 20
    if: "!startsWith(github.event.head_commit.message, '[skip ci] ')"

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
      - run: python3 -m pip install $(grep pre-commit== requirements.txt)

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: "pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\npre-commit-"
      - run: pre-commit run --all-files --color=always
      - run: git diff --exit-code --patch > /tmp/pre-commit.patch; git diff --color; git reset --hard || true
        if: failure()
      - uses: actions/upload-artifact@v5
        with:
          name: Apply pre-commit fix.patch
          path: /tmp/pre-commit.patch
          retention-days: 1
        if: failure()

      # Mark as Success
      - run: touch SUCCESS
      - uses: actions/upload-artifact@v5
        with:
          name: pre-commit-success
          path: SUCCESS
          retention-days: 1

  main:
    name: Continuous integration
    runs-on: ubuntu-24.04
    timeout-minutes: 20
    if: always()
    needs: pre-commit

    steps:
      # Test pre-commit Success
      - uses: actions/download-artifact@v6
        with:
          name: pre-commit-success
          destination: /tmp

      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
      - run: python3 -m pip install --requirement=.github/requirements.txt
      - run: python3 -m pip install --requirement=requirements.txt

      - name: Print the environment
        run: c2cciutils-env
        env:
          GITHUB_EVENT: ${{ toJson(github) }}

      - run: poetry install

      - name: Prospector
        run: poetry run prospector --die-on-tool-error --output-format=pylint

      - run: git diff --exit-code --patch > /tmp/prospector.patch || true
        if: failure()
      - uses: actions/upload-artifact@v5
        with:
          name: Apply Prospector fix.patch
          path: /tmp/prospector.patch
          retention-days: 1
        if: failure()
      - run: git reset --hard
        if: failure()

      - name: Test applications list
        run: poetry run applications-download list
      - name: Test list installed applications
        run: poetry run applications-download installed
      - name: Test applications download
        run: poetry run applications-download install --all
      - name: Test applications update
        run: poetry run applications-download update
      - name: Test list installed applications
        run: poetry run applications-download installed

      - name: Publish
        run: tag-publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - run: git diff --exit-code --patch > /tmp/dpkg-versions.patch; git diff --color; git reset --hard || true
        if: failure()
      - uses: actions/upload-artifact@v5
        with:
          name: Update dpkg versions list.patch
          path: /tmp/dpkg-versions.patch
          retention-days: 1
        if: failure()
